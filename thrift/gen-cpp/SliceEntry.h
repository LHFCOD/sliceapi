/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SliceEntry_H
#define SliceEntry_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "slice_types.h"

namespace Slice {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SliceEntryIf {
 public:
  virtual ~SliceEntryIf() {}
  virtual Pointer RequstMDSFile(const std::string& filePath) = 0;
  virtual void GetTileVirtualData(std::vector<int8_t> & _return, const int32_t Level, const int32_t x, const int32_t y) = 0;
  virtual int32_t add(const int32_t a, const int32_t b) = 0;
};

class SliceEntryIfFactory {
 public:
  typedef SliceEntryIf Handler;

  virtual ~SliceEntryIfFactory() {}

  virtual SliceEntryIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SliceEntryIf* /* handler */) = 0;
};

class SliceEntryIfSingletonFactory : virtual public SliceEntryIfFactory {
 public:
  SliceEntryIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<SliceEntryIf>& iface) : iface_(iface) {}
  virtual ~SliceEntryIfSingletonFactory() {}

  virtual SliceEntryIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SliceEntryIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<SliceEntryIf> iface_;
};

class SliceEntryNull : virtual public SliceEntryIf {
 public:
  virtual ~SliceEntryNull() {}
  Pointer RequstMDSFile(const std::string& /* filePath */) {
    Pointer _return = 0;
    return _return;
  }
  void GetTileVirtualData(std::vector<int8_t> & /* _return */, const int32_t /* Level */, const int32_t /* x */, const int32_t /* y */) {
    return;
  }
  int32_t add(const int32_t /* a */, const int32_t /* b */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _SliceEntry_RequstMDSFile_args__isset {
  _SliceEntry_RequstMDSFile_args__isset() : filePath(false) {}
  bool filePath :1;
} _SliceEntry_RequstMDSFile_args__isset;

class SliceEntry_RequstMDSFile_args {
 public:

  SliceEntry_RequstMDSFile_args(const SliceEntry_RequstMDSFile_args&);
  SliceEntry_RequstMDSFile_args& operator=(const SliceEntry_RequstMDSFile_args&);
  SliceEntry_RequstMDSFile_args() : filePath() {
  }

  virtual ~SliceEntry_RequstMDSFile_args() throw();
  std::string filePath;

  _SliceEntry_RequstMDSFile_args__isset __isset;

  void __set_filePath(const std::string& val);

  bool operator == (const SliceEntry_RequstMDSFile_args & rhs) const
  {
    if (!(filePath == rhs.filePath))
      return false;
    return true;
  }
  bool operator != (const SliceEntry_RequstMDSFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SliceEntry_RequstMDSFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SliceEntry_RequstMDSFile_pargs {
 public:


  virtual ~SliceEntry_RequstMDSFile_pargs() throw();
  const std::string* filePath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SliceEntry_RequstMDSFile_result__isset {
  _SliceEntry_RequstMDSFile_result__isset() : success(false) {}
  bool success :1;
} _SliceEntry_RequstMDSFile_result__isset;

class SliceEntry_RequstMDSFile_result {
 public:

  SliceEntry_RequstMDSFile_result(const SliceEntry_RequstMDSFile_result&);
  SliceEntry_RequstMDSFile_result& operator=(const SliceEntry_RequstMDSFile_result&);
  SliceEntry_RequstMDSFile_result() : success(0) {
  }

  virtual ~SliceEntry_RequstMDSFile_result() throw();
  Pointer success;

  _SliceEntry_RequstMDSFile_result__isset __isset;

  void __set_success(const Pointer val);

  bool operator == (const SliceEntry_RequstMDSFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SliceEntry_RequstMDSFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SliceEntry_RequstMDSFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SliceEntry_RequstMDSFile_presult__isset {
  _SliceEntry_RequstMDSFile_presult__isset() : success(false) {}
  bool success :1;
} _SliceEntry_RequstMDSFile_presult__isset;

class SliceEntry_RequstMDSFile_presult {
 public:


  virtual ~SliceEntry_RequstMDSFile_presult() throw();
  Pointer* success;

  _SliceEntry_RequstMDSFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SliceEntry_GetTileVirtualData_args__isset {
  _SliceEntry_GetTileVirtualData_args__isset() : Level(false), x(false), y(false) {}
  bool Level :1;
  bool x :1;
  bool y :1;
} _SliceEntry_GetTileVirtualData_args__isset;

class SliceEntry_GetTileVirtualData_args {
 public:

  SliceEntry_GetTileVirtualData_args(const SliceEntry_GetTileVirtualData_args&);
  SliceEntry_GetTileVirtualData_args& operator=(const SliceEntry_GetTileVirtualData_args&);
  SliceEntry_GetTileVirtualData_args() : Level(0), x(0), y(0) {
  }

  virtual ~SliceEntry_GetTileVirtualData_args() throw();
  int32_t Level;
  int32_t x;
  int32_t y;

  _SliceEntry_GetTileVirtualData_args__isset __isset;

  void __set_Level(const int32_t val);

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  bool operator == (const SliceEntry_GetTileVirtualData_args & rhs) const
  {
    if (!(Level == rhs.Level))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const SliceEntry_GetTileVirtualData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SliceEntry_GetTileVirtualData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SliceEntry_GetTileVirtualData_pargs {
 public:


  virtual ~SliceEntry_GetTileVirtualData_pargs() throw();
  const int32_t* Level;
  const int32_t* x;
  const int32_t* y;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SliceEntry_GetTileVirtualData_result__isset {
  _SliceEntry_GetTileVirtualData_result__isset() : success(false) {}
  bool success :1;
} _SliceEntry_GetTileVirtualData_result__isset;

class SliceEntry_GetTileVirtualData_result {
 public:

  SliceEntry_GetTileVirtualData_result(const SliceEntry_GetTileVirtualData_result&);
  SliceEntry_GetTileVirtualData_result& operator=(const SliceEntry_GetTileVirtualData_result&);
  SliceEntry_GetTileVirtualData_result() {
  }

  virtual ~SliceEntry_GetTileVirtualData_result() throw();
  std::vector<int8_t>  success;

  _SliceEntry_GetTileVirtualData_result__isset __isset;

  void __set_success(const std::vector<int8_t> & val);

  bool operator == (const SliceEntry_GetTileVirtualData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SliceEntry_GetTileVirtualData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SliceEntry_GetTileVirtualData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SliceEntry_GetTileVirtualData_presult__isset {
  _SliceEntry_GetTileVirtualData_presult__isset() : success(false) {}
  bool success :1;
} _SliceEntry_GetTileVirtualData_presult__isset;

class SliceEntry_GetTileVirtualData_presult {
 public:


  virtual ~SliceEntry_GetTileVirtualData_presult() throw();
  std::vector<int8_t> * success;

  _SliceEntry_GetTileVirtualData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SliceEntry_add_args__isset {
  _SliceEntry_add_args__isset() : a(false), b(false) {}
  bool a :1;
  bool b :1;
} _SliceEntry_add_args__isset;

class SliceEntry_add_args {
 public:

  SliceEntry_add_args(const SliceEntry_add_args&);
  SliceEntry_add_args& operator=(const SliceEntry_add_args&);
  SliceEntry_add_args() : a(0), b(0) {
  }

  virtual ~SliceEntry_add_args() throw();
  int32_t a;
  int32_t b;

  _SliceEntry_add_args__isset __isset;

  void __set_a(const int32_t val);

  void __set_b(const int32_t val);

  bool operator == (const SliceEntry_add_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    return true;
  }
  bool operator != (const SliceEntry_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SliceEntry_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SliceEntry_add_pargs {
 public:


  virtual ~SliceEntry_add_pargs() throw();
  const int32_t* a;
  const int32_t* b;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SliceEntry_add_result__isset {
  _SliceEntry_add_result__isset() : success(false) {}
  bool success :1;
} _SliceEntry_add_result__isset;

class SliceEntry_add_result {
 public:

  SliceEntry_add_result(const SliceEntry_add_result&);
  SliceEntry_add_result& operator=(const SliceEntry_add_result&);
  SliceEntry_add_result() : success(0) {
  }

  virtual ~SliceEntry_add_result() throw();
  int32_t success;

  _SliceEntry_add_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SliceEntry_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SliceEntry_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SliceEntry_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SliceEntry_add_presult__isset {
  _SliceEntry_add_presult__isset() : success(false) {}
  bool success :1;
} _SliceEntry_add_presult__isset;

class SliceEntry_add_presult {
 public:


  virtual ~SliceEntry_add_presult() throw();
  int32_t* success;

  _SliceEntry_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SliceEntryClient : virtual public SliceEntryIf {
 public:
  SliceEntryClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SliceEntryClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  Pointer RequstMDSFile(const std::string& filePath);
  void send_RequstMDSFile(const std::string& filePath);
  Pointer recv_RequstMDSFile();
  void GetTileVirtualData(std::vector<int8_t> & _return, const int32_t Level, const int32_t x, const int32_t y);
  void send_GetTileVirtualData(const int32_t Level, const int32_t x, const int32_t y);
  void recv_GetTileVirtualData(std::vector<int8_t> & _return);
  int32_t add(const int32_t a, const int32_t b);
  void send_add(const int32_t a, const int32_t b);
  int32_t recv_add();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SliceEntryProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<SliceEntryIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SliceEntryProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_RequstMDSFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTileVirtualData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SliceEntryProcessor(::apache::thrift::stdcxx::shared_ptr<SliceEntryIf> iface) :
    iface_(iface) {
    processMap_["RequstMDSFile"] = &SliceEntryProcessor::process_RequstMDSFile;
    processMap_["GetTileVirtualData"] = &SliceEntryProcessor::process_GetTileVirtualData;
    processMap_["add"] = &SliceEntryProcessor::process_add;
  }

  virtual ~SliceEntryProcessor() {}
};

class SliceEntryProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SliceEntryProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< SliceEntryIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< SliceEntryIfFactory > handlerFactory_;
};

class SliceEntryMultiface : virtual public SliceEntryIf {
 public:
  SliceEntryMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<SliceEntryIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SliceEntryMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<SliceEntryIf> > ifaces_;
  SliceEntryMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<SliceEntryIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  Pointer RequstMDSFile(const std::string& filePath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RequstMDSFile(filePath);
    }
    return ifaces_[i]->RequstMDSFile(filePath);
  }

  void GetTileVirtualData(std::vector<int8_t> & _return, const int32_t Level, const int32_t x, const int32_t y) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTileVirtualData(_return, Level, x, y);
    }
    ifaces_[i]->GetTileVirtualData(_return, Level, x, y);
    return;
  }

  int32_t add(const int32_t a, const int32_t b) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(a, b);
    }
    return ifaces_[i]->add(a, b);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SliceEntryConcurrentClient : virtual public SliceEntryIf {
 public:
  SliceEntryConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SliceEntryConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  Pointer RequstMDSFile(const std::string& filePath);
  int32_t send_RequstMDSFile(const std::string& filePath);
  Pointer recv_RequstMDSFile(const int32_t seqid);
  void GetTileVirtualData(std::vector<int8_t> & _return, const int32_t Level, const int32_t x, const int32_t y);
  int32_t send_GetTileVirtualData(const int32_t Level, const int32_t x, const int32_t y);
  void recv_GetTileVirtualData(std::vector<int8_t> & _return, const int32_t seqid);
  int32_t add(const int32_t a, const int32_t b);
  int32_t send_add(const int32_t a, const int32_t b);
  int32_t recv_add(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
