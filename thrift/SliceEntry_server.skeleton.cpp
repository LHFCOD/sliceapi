// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/SliceEntry.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "../include/interface.h"
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::Slice;
using namespace std;
using namespace TileImage;
class SliceEntryHandler : virtual public SliceEntryIf
{
private:
  map<string, shared_ptr<MDSFile>> mdsMap;

public:
  SliceEntryHandler()
  {
    // Your initialization goes here
  }

  Pointer RequstMDSFile(const std::string &filePath)
  {
    // Your implementation goes here
    printf("RequstMDSFile\n");
    map<string, shared_ptr<MDSFile>>::iterator iter = mdsMap.find(filePath);
    if (iter != mdsMap.end())
    {
      return (long)iter->second.get();
    }
    else
    {
      try
      {
        shared_ptr<MDSFile> file(new MDSFile(filePath));
        if (file)
        {
          mdsMap.insert(pair<string, shared_ptr<MDSFile>>(filePath, file));
          return (long)file.get();
        }
        else
        {
          return 0;
        }
      }
      catch (exception ex)
      {
        return 0;
      }
    }
  }

  void GetTileVirtualData(std::vector<int8_t> &_return, const Pointer key, const int32_t Level, const int32_t x, const int32_t y)
  {
    // Your implementation goes here
    printf("GetTileVirtualData\n");
    MDSFile *pMDSFile = (MDSFile *)key;
    FileBlock *block = pMDSFile->GetTileVirtualData(Level, x, y);
    _return.assign(block->p, block->p + block->len);
    delete block;
  }

  int32_t add(const int32_t a, const int32_t b)
  {
    // Your implementation goes here
    printf("add\n");
    return a + b;
  }
  void GetSliceInfo(SliceInfo &_return, const Pointer key)
  {
    // Your implementation goes here
    printf("GetSliceInfo\n");
    MDSFile *pMDSFile = (MDSFile *)key;
    ImageInfo info = pMDSFile->info;
    _return.LayerCount = info.LayerCount;
    _return.ImageWidth = info.ImageWidth;
    _return.ImageHeight=info.ImageHeight;
    _return.TileWidth = info.TileWidth;
    _return.TileHeight = info.TileHeight;
  }
};

int main(int argc, char **argv)
{
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<SliceEntryHandler> handler(new SliceEntryHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new SliceEntryProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}
